////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : Oexp02_IO.vf
// /___/   /\     Timestamp : 04/03/2018 20:53:12
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -sympath G:/OexpExp04_IP2SCPU/ipcore_dir -intstyle ise -family kintex7 -verilog G:/OexpExp04_IP2SCPU/Oexp02_IO.vf -w G:/OexpExp04_IP2SCPU/Oexp02_IO.sch
//Design Name: Oexp02_IO
//Device: kintex7
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale 1ns / 1ps

module SCPU_MUSER_Oexp02_IO(clk, 
                            Data_in, 
                            inst_in, 
                            INT, 
                            MIO_ready, 
                            reset, 
                            Addr_out, 
                            CPU_MIO, 
                            Data_out, 
                            mem_w, 
                            PC_out);

    input clk;
    input [31:0] Data_in;
    input [31:0] inst_in;
    input INT;
    input MIO_ready;
    input reset;
   output [31:0] Addr_out;
   output CPU_MIO;
   output [31:0] Data_out;
   output mem_w;
   output [31:0] PC_out;
   
   wire XLXN_1;
   wire XLXN_2;
   wire XLXN_3;
   wire XLXN_4;
   wire XLXN_5;
   wire XLXN_6;
   wire [2:0] XLXN_7;
   
   Data_path  XLXI_1 (.ALUSrc_B(XLXN_2), 
                     .ALU_Control(XLXN_7[2:0]), 
                     .Branch(XLXN_5), 
                     .clk(clk), 
                     .Data_in(Data_in[31:0]), 
                     .inst_field(inst_in[25:0]), 
                     .Jump(XLXN_4), 
                     .MemtoReg(XLXN_3), 
                     .RegDst(XLXN_1), 
                     .RegWrite(XLXN_6), 
                     .rst(reset), 
                     .ALU_out(Addr_out[31:0]), 
                     .Data_out(Data_out[31:0]), 
                     .PC_out(PC_out[31:0]));
   SCPU_ctrl  XLXI_2 (.Fun(inst_in[5:0]), 
                     .MIO_ready(MIO_ready), 
                     .OPcode(inst_in[31:26]), 
                     .ALUSrc_B(XLXN_2), 
                     .ALU_Control(XLXN_7[2:0]), 
                     .Branch(XLXN_5), 
                     .CPU_MIO(CPU_MIO), 
                     .Jump(XLXN_4), 
                     .MemtoReg(XLXN_3), 
                     .mem_w(mem_w), 
                     .RegDst(XLXN_1), 
                     .RegWrite(XLXN_6));
endmodule
`timescale 1ns / 1ps

module Oexp02_IO(clk_100mhz, 
                 K_COL, 
                 RSTN, 
                 SW, 
                 AN, 
                 Buzzer, 
                 CR, 
                 K_ROW, 
                 LED, 
                 LEDCLK, 
                 LEDCLR, 
                 LEDDT, 
                 LEDEN, 
                 RDY, 
                 readn, 
                 SEGCLK, 
                 SEGCLR, 
                 SEGDT, 
                 SEGEN, 
                 SEGMENT);

    input clk_100mhz;
    input [3:0] K_COL;
    input RSTN;
    input [15:0] SW;
   output [3:0] AN;
   output Buzzer;
   output CR;
   output [4:0] K_ROW;
   output [7:0] LED;
   output LEDCLK;
   output LEDCLR;
   output LEDDT;
   output LEDEN;
   output RDY;
   output readn;
   output SEGCLK;
   output SEGCLR;
   output SEGDT;
   output SEGEN;
   output [7:0] SEGMENT;
   
   wire [31:0] Addr_out;
   wire [31:0] Ai;
   wire [31:0] Bi;
   wire [7:0] blink;
   wire [3:0] BTN_OK;
   wire Clk_CPU;
   wire [31:0] Counter_out;
   wire [31:0] CPU2IO;
   wire [31:0] Data_in;
   wire [31:0] Data_out;
   wire [31:0] Disp_num;
   wire [31:0] Div;
   wire GPIOE0;
   wire GPIOF0;
   wire [31:0] inst;
   wire INT;
   wire IO_clk;
   wire [4:0] Key_out;
   wire [15:0] LED_out;
   wire [7:0] LE_out;
   wire mem_w;
   wire N0;
   wire [31:0] PC;
   wire [7:0] point_out;
   wire [3:0] Pulse;
   wire rst;
   wire [15:0] SW_OK;
   wire V5;
   wire XLXN_132;
   wire XLXN_133;
   wire XLXN_135;
   wire [1:0] XLXN_148;
   wire [31:0] XLXN_159;
   wire [0:0] XLXN_160;
   wire [9:0] XLXN_162;
   wire [31:0] XLXN_163;
   wire RDY_DUMMY;
   wire readn_DUMMY;
   
   assign RDY = RDY_DUMMY;
   assign readn = readn_DUMMY;
   SEnter_2_32  M4 (.BTN(BTN_OK[2:0]), 
                   .clk(clk_100mhz), 
                   .Ctrl({SW_OK[7:5], SW_OK[15], SW_OK[0]}), 
                   .Din(Key_out[4:0]), 
                   .D_ready(RDY_DUMMY), 
                   .Ai(Ai[31:0]), 
                   .Bi(Bi[31:0]), 
                   .blink(blink[7:0]), 
                   .readn(readn_DUMMY));
   ROM_D  U2 (.a(PC[11:2]), 
             .spo(inst[31:0]));
   RAM_B  U3 (.addra(XLXN_162[9:0]), 
             .clka(clk_100mhz), 
             .dina(XLXN_159[31:0]), 
             .wea(XLXN_160[0]), 
             .douta(XLXN_163[31:0]));
   MIO_BUS  U4 (.addr_bus(Addr_out[31:0]), 
               .BTN(BTN_OK[3:0]), 
               .clk(clk_100mhz), 
               .counter_out(Counter_out[31:0]), 
               .counter0_out(INT), 
               .counter1_out(XLXN_133), 
               .counter2_out(XLXN_132), 
               .Cpu_data2bus(Data_out[31:0]), 
               .led_out(LED_out[15:0]), 
               .mem_w(mem_w), 
               .ram_data_out(XLXN_163[31:0]), 
               .rst(rst), 
               .SW(SW_OK[15:0]), 
               .counter_we(XLXN_135), 
               .Cpu_data4bus(Data_in[31:0]), 
               .data_ram_we(XLXN_160[0]), 
               .GPIOe0000000_we(GPIOE0), 
               .GPIOf0000000_we(GPIOF0), 
               .Peripheral_in(CPU2IO[31:0]), 
               .ram_addr(XLXN_162[9:0]), 
               .ram_data_in(XLXN_159[31:0]));
   Multi_8CH32  U5 (.blink_in({N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, 
         N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, 
         N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, 
         N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, 
         N0}), 
                   .clk(IO_clk), 
                   .Data0(CPU2IO[31:0]), 
                   .EN(GPIOE0), 
                   .point_in({Div[31:0], Div[31:0]}), 
                   .rst(rst), 
                   .Test(SW_OK[7:5]), 
                   .Test_data1({N0, N0, PC[31:2]}), 
                   .Test_data2(inst[31:0]), 
                   .Test_data3(Counter_out[31:0]), 
                   .Test_data4(Addr_out[31:0]), 
                   .Test_data5(Data_out[31:0]), 
                   .Test_data6(Data_in[31:0]), 
                   .Test_data7(PC[31:0]), 
                   .blink_out(LE_out[7:0]), 
                   .Disp_num(Disp_num[31:0]), 
                   .point_out(point_out[7:0]));
   Display  U6 (.clk(clk_100mhz), 
               .flash(Div[25]), 
               .Hexs(Disp_num[31:0]), 
               .LES(LE_out[7:0]), 
               .point(point_out[7:0]), 
               .rst(rst), 
               .Start(Div[20]), 
               .Text(SW_OK[0]), 
               .seg_clk(SEGCLK), 
               .seg_clrn(SEGCLR), 
               .SEG_PEN(SEGEN), 
               .seg_sout(SEGDT));
   GPIO  U7 (.clk(IO_clk), 
            .EN(GPIOF0), 
            .P_Data(CPU2IO[31:0]), 
            .rst(rst), 
            .Start(Div[20]), 
            .counter_set(XLXN_148[1:0]), 
            .GPIOf0(), 
            .ledclk(LEDCLK), 
            .ledclrn(LEDCLR), 
            .LEDEN(LEDEN), 
            .ledsout(LEDDT), 
            .LED_out(LED_out[15:0]));
   clk_div  U8 (.clk(clk_100mhz), 
               .rst(rst), 
               .SW2(SW_OK[2]), 
               .clkdiv(Div[31:0]), 
               .Clk_CPU(Clk_CPU));
   SAnti_jitter  U9 (.clk(clk_100mhz), 
                    .Key_y(K_COL[3:0]), 
                    .readn(readn_DUMMY), 
                    .RSTN(RSTN), 
                    .SW(SW[15:0]), 
                    .BTN_OK(BTN_OK[3:0]), 
                    .CR(CR), 
                    .Key_out(Key_out[4:0]), 
                    .Key_ready(RDY_DUMMY), 
                    .Key_x(K_ROW[4:0]), 
                    .pulse_out(Pulse[3:0]), 
                    .rst(rst), 
                    .SW_OK(SW_OK[15:0]));
   Counter  U10 (.clk(IO_clk), 
                .clk0(Div[6]), 
                .clk1(Div[9]), 
                .clk2(Div[11]), 
                .counter_ch(XLXN_148[1:0]), 
                .counter_val(CPU2IO[31:0]), 
                .counter_we(XLXN_135), 
                .rst(rst), 
                .counter_out(Counter_out[31:0]), 
                .counter0_OUT(INT), 
                .counter1_OUT(XLXN_133), 
                .counter2_OUT(XLXN_132));
   Seg7_Dev  U61 (.flash(Div[25]), 
                 .Hexs(Disp_num[31:0]), 
                 .LES(LE_out[7:0]), 
                 .point(point_out[7:0]), 
                 .Scan({SW_OK[1], Div[19:18]}), 
                 .SW0(SW_OK[0]), 
                 .AN(AN[3:0]), 
                 .SEGMENT(SEGMENT[7:0]));
   PIO  U71 (.clk(IO_clk), 
            .EN(GPIOF0), 
            .PData_in(CPU2IO[31:0]), 
            .rst(rst), 
            .counter_set(), 
            .GPIOf0(), 
            .LED_out(LED[7:0]));
   VCC  XLXI_7 (.P(V5));
   GND  XLXI_15 (.G(N0));
   BUF  XLXI_18 (.I(V5), 
                .O(Buzzer));
   INV  XLXI_31 (.I(Clk_CPU), 
                .O(IO_clk));
   SCPU_MUSER_Oexp02_IO  XLXI_35 (.clk(Clk_CPU), 
                                 .Data_in(Data_in[31:0]), 
                                 .inst_in(inst[31:0]), 
                                 .INT(INT), 
                                 .MIO_ready(), 
                                 .reset(rst), 
                                 .Addr_out(Addr_out[31:0]), 
                                 .CPU_MIO(), 
                                 .Data_out(Data_out[31:0]), 
                                 .mem_w(mem_w), 
                                 .PC_out(PC[31:0]));
endmodule
