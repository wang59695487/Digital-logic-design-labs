////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : SCPU.vf
// /___/   /\     Timestamp : 05/15/2018 18:19:27
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -sympath G:/Lab7/Oxp7_Test/ipcore_dir -intstyle ise -family kintex7 -verilog G:/Lab7/Oxp7_Test/SCPU.vf -w G:/Lab7/Oxp7_Test/SCPU.sch
//Design Name: SCPU
//Device: kintex7
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale 1ns / 1ps

module Data_path_MUSER_SCPU(ALUSrc_A, 
                            ALUSrc_B, 
                            ALU_Control, 
                            Branch, 
                            clk, 
                            DatatoReg, 
                            Data_in, 
                            inst_field, 
                            Jal, 
                            RegDst, 
                            RegWrite, 
                            rst, 
                            ALU_out, 
                            Data_out, 
                            overflow, 
                            PC_out, 
                            zero);

    input ALUSrc_A;
    input [1:0] ALUSrc_B;
    input [2:0] ALU_Control;
    input [1:0] Branch;
    input clk;
    input [1:0] DatatoReg;
    input [31:0] Data_in;
    input [25:0] inst_field;
    input Jal;
    input RegDst;
    input RegWrite;
    input rst;
   output [31:0] ALU_out;
   output [31:0] Data_out;
   output overflow;
   output [31:0] PC_out;
   output zero;
   
   wire [31:0] Imm_32;
   wire N0;
   wire [31:0] pc_4;
   wire [31:0] rdata_A;
   wire V5;
   wire [4:0] XLXN_1;
   wire [31:0] XLXN_2;
   wire [31:0] XLXN_4;
   wire [31:0] XLXN_16;
   wire [4:0] XLXN_27;
   wire [31:0] XLXN_37;
   wire [31:0] XLXN_42;
   wire [31:0] XLXN_58;
   wire [31:0] ALU_out_DUMMY;
   wire [31:0] Data_out_DUMMY;
   wire [31:0] PC_out_DUMMY;
   
   assign ALU_out[31:0] = ALU_out_DUMMY[31:0];
   assign Data_out[31:0] = Data_out_DUMMY[31:0];
   assign PC_out[31:0] = PC_out_DUMMY[31:0];
   ADD  ADD_Branch (.a(pc_4[31:0]), 
                   .b({Imm_32[29:0], N0, N0}), 
                   .c(XLXN_16[31:0]));
   ADD  ADD_PC_4 (.a(PC_out_DUMMY[31:0]), 
                 .b({N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, 
         N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, V5, N0, 
         N0}), 
                 .c(pc_4[31:0]));
   Ext_32  Ext (.imm_16(inst_field[15:0]), 
               .imm_32(Imm_32[31:0]));
   MUX2T1_5  MUXD1 (.I0(XLXN_27[4:0]), 
                   .I1(inst_field[15:11]), 
                   .S(RegDst), 
                   .o(XLXN_1[4:0]));
   REG32  PC (.CE(V5), 
             .clk(clk), 
             .D(XLXN_37[31:0]), 
             .rst(rst), 
             .Q(PC_out_DUMMY[31:0]));
   ALU  U1_1 (.A(XLXN_58[31:0]), 
             .ALU_operation(ALU_Control[2:0]), 
             .B(XLXN_4[31:0]), 
             .Co(), 
             .overflow(overflow), 
             .res(ALU_out_DUMMY[31:0]), 
             .zero(zero));
   Regs  U2_2 (.clk(clk), 
              .reg_Rd_addr_A(inst_field[25:21]), 
              .reg_Rt_addr_B(inst_field[20:16]), 
              .reg_Wt_addr(XLXN_1[4:0]), 
              .rst(rst), 
              .wdata(XLXN_2[31:0]), 
              .we(RegWrite), 
              .rdata_A(rdata_A[31:0]), 
              .rdata_B(Data_out_DUMMY[31:0]));
   VCC  XLXI_16 (.P(V5));
   GND  XLXI_17 (.G(N0));
   MUX2T1_5  XLXI_18 (.I0(inst_field[20:16]), 
                     .I1({V5, V5, V5, V5, V5}), 
                     .S(Jal), 
                     .o(XLXN_27[4:0]));
   MUX4T1_32  XLXI_19 (.I0(pc_4[31:0]), 
                      .I1(XLXN_16[31:0]), 
                      .I2({pc_4[31:28], inst_field[25:0], N0, N0}), 
                      .I3(rdata_A[31:0]), 
                      .s(Branch[1:0]), 
                      .o(XLXN_37[31:0]));
   MUX4T1_32  XLXI_20 (.I0(ALU_out_DUMMY[31:0]), 
                      .I1(Data_in[31:0]), 
                      .I2({inst_field[15:0], N0, N0, N0, N0, N0, N0, N0, N0, 
         N0, N0, N0, N0, N0, N0, N0, N0}), 
                      .I3(pc_4[31:0]), 
                      .s(DatatoReg[1:0]), 
                      .o(XLXN_2[31:0]));
   MUX4T1_32  XLXI_21 (.I0(Data_out_DUMMY[31:0]), 
                      .I1(Imm_32[31:0]), 
                      .I2(XLXN_42[31:0]), 
                      .I3(), 
                      .s(ALUSrc_B[1:0]), 
                      .o(XLXN_4[31:0]));
   Ext_u  XLXI_22 (.imm_16(inst_field[15:0]), 
                  .imm_32(XLXN_42[31:0]));
   MUX2T1_32  XLXI_23 (.I0(rdata_A[31:0]), 
                      .I1({N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, 
         N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, 
         inst_field[10:6]}), 
                      .S(ALUSrc_A), 
                      .o(XLXN_58[31:0]));
endmodule
`timescale 1ns / 1ps

module SCPU(clk, 
            Data_in, 
            inst_in, 
            INT, 
            MIO_ready, 
            reset, 
            Addr_out, 
            CPU_MIO, 
            Data_out, 
            mem_w, 
            PC_out);

    input clk;
    input [31:0] Data_in;
    input [31:0] inst_in;
    input INT;
    input MIO_ready;
    input reset;
   output [31:0] Addr_out;
   output CPU_MIO;
   output [31:0] Data_out;
   output mem_w;
   output [31:0] PC_out;
   
   wire XLXN_60;
   wire XLXN_63;
   wire [1:0] XLXN_64;
   wire [1:0] XLXN_71;
   wire [2:0] XLXN_74;
   wire XLXN_75;
   wire XLXN_76;
   wire [1:0] XLXN_78;
   wire XLXN_79;
   
   SCPU_ctrl  XLXI_3 (.Fun(inst_in[5:0]), 
                     .MIO_ready(MIO_ready), 
                     .OPcode(inst_in[31:26]), 
                     .zero(XLXN_60), 
                     .ALUSrc_A(XLXN_79), 
                     .ALUSrc_B(XLXN_78[1:0]), 
                     .ALU_Control(XLXN_74[2:0]), 
                     .Branch(XLXN_71[1:0]), 
                     .CPU_MIO(CPU_MIO), 
                     .DatatoReg(XLXN_64[1:0]), 
                     .Jal(XLXN_63), 
                     .mem_w(mem_w), 
                     .RegDst(XLXN_76), 
                     .RegWrite(XLXN_75));
   Data_path_MUSER_SCPU  XLXI_4 (.ALUSrc_A(XLXN_79), 
                                .ALUSrc_B(XLXN_78[1:0]), 
                                .ALU_Control(XLXN_74[2:0]), 
                                .Branch(XLXN_71[1:0]), 
                                .clk(clk), 
                                .DatatoReg(XLXN_64[1:0]), 
                                .Data_in(Data_in[31:0]), 
                                .inst_field(inst_in[25:0]), 
                                .Jal(XLXN_63), 
                                .RegDst(XLXN_76), 
                                .RegWrite(XLXN_75), 
                                .rst(reset), 
                                .ALU_out(Addr_out[31:0]), 
                                .Data_out(Data_out[31:0]), 
                                .overflow(), 
                                .PC_out(PC_out[31:0]), 
                                .zero(XLXN_60));
endmodule
