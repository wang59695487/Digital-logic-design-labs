////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : Data_path.vf
// /___/   /\     Timestamp : 05/08/2018 18:25:12
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -sympath C:/Users/asus/Desktop/Computer_Organization/Lab/Lab5/Oxp6/ipcore_dir -intstyle ise -family kintex7 -verilog C:/Users/asus/Desktop/Computer_Organization/Lab/Lab5/Oxp6/Data_path.vf -w C:/Users/asus/Desktop/Computer_Organization/Lab/Lab5/Oxp6/Data_path.sch
//Design Name: Data_path
//Device: kintex7
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale 1ns / 1ps

module Data_path(ALUSrc_B, 
                 ALU_Control, 
                 Branch, 
                 clk, 
                 Data_in, 
                 inst_field, 
                 Jump, 
                 MemtoReg, 
                 RegDst, 
                 RegWrite, 
                 rst, 
                 ALU_out, 
                 Data_out, 
                 PC_out);

    input ALUSrc_B;
    input [2:0] ALU_Control;
    input Branch;
    input clk;
    input [31:0] Data_in;
    input [25:0] inst_field;
    input Jump;
    input MemtoReg;
    input RegDst;
    input RegWrite;
    input rst;
   output [31:0] ALU_out;
   output [31:0] Data_out;
   output [31:0] PC_out;
   
   wire [31:0] Imm_32;
   wire N0;
   wire [31:0] pc_4;
   wire V5;
   wire [4:0] XLXN_1;
   wire [31:0] XLXN_2;
   wire [31:0] XLXN_4;
   wire [31:0] XLXN_5;
   wire XLXN_6;
   wire [31:0] XLXN_7;
   wire XLXN_8;
   wire [31:0] XLXN_16;
   wire [31:0] XLXN_19;
   wire [31:0] ALU_out_DUMMY;
   wire [31:0] Data_out_DUMMY;
   wire [31:0] PC_out_DUMMY;
   
   assign ALU_out[31:0] = ALU_out_DUMMY[31:0];
   assign Data_out[31:0] = Data_out_DUMMY[31:0];
   assign PC_out[31:0] = PC_out_DUMMY[31:0];
   ADD  ADD_Branch (.a(pc_4[31:0]), 
                   .b({Imm_32[29:0], N0, N0}), 
                   .c(XLXN_16[31:0]));
   ADD  ADD_PC_4 (.a(PC_out_DUMMY[31:0]), 
                 .b({N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, 
         N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, V5, N0, 
         N0}), 
                 .c(pc_4[31:0]));
   Ext_32  Ext (.imm_16(inst_field[15:0]), 
               .imm_32(Imm_32[31:0]));
   MUX2T1_5  MUXD1 (.I0(inst_field[20:16]), 
                   .I1(inst_field[15:11]), 
                   .S(RegDst), 
                   .o(XLXN_1[4:0]));
   MUX2T1_32  MUXD2 (.I0(ALU_out_DUMMY[31:0]), 
                    .I1(Data_in[31:0]), 
                    .S(MemtoReg), 
                    .o(XLXN_2[31:0]));
   MUX2T1_32  MUXD3 (.I0(Data_out_DUMMY[31:0]), 
                    .I1(Imm_32[31:0]), 
                    .S(ALUSrc_B), 
                    .o(XLXN_4[31:0]));
   MUX2T1_32  MUXD4 (.I0(pc_4[31:0]), 
                    .I1(XLXN_16[31:0]), 
                    .S(XLXN_8), 
                    .o(XLXN_7[31:0]));
   MUX2T1_32  MUXD5 (.I0(XLXN_7[31:0]), 
                    .I1({pc_4[31:28], inst_field[25:0], N0, N0}), 
                    .S(Jump), 
                    .o(XLXN_19[31:0]));
   REG32  PC (.CE(V5), 
             .clk(clk), 
             .D(XLXN_19[31:0]), 
             .rst(rst), 
             .Q(PC_out_DUMMY[31:0]));
   ALU  U1_1 (.A(XLXN_5[31:0]), 
             .ALU_operation(ALU_Control[2:0]), 
             .B(XLXN_4[31:0]), 
             .Co(), 
             .overflow(), 
             .res(ALU_out_DUMMY[31:0]), 
             .zero(XLXN_6));
   Regs  U2_2 (.clk(clk), 
              .reg_Rd_addr_A(inst_field[25:21]), 
              .reg_Rt_addr_B(inst_field[20:16]), 
              .reg_Wt_addr(XLXN_1[4:0]), 
              .rst(rst), 
              .wdata(XLXN_2[31:0]), 
              .we(RegWrite), 
              .rdata_A(XLXN_5[31:0]), 
              .rdata_B(Data_out_DUMMY[31:0]));
   AND2  XLXI_10 (.I0(XLXN_6), 
                 .I1(Branch), 
                 .O(XLXN_8));
   VCC  XLXI_16 (.P(V5));
   GND  XLXI_17 (.G(N0));
endmodule
