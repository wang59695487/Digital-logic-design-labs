////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : framework.vf
// /___/   /\     Timestamp : 04/02/2018 16:34:49
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -sympath "C:/Users/TLT3620/Documents/Tencent Files/627464892/FileRecv/HYF5681_03/JJT2420-04/ipcore_dir" -intstyle ise -family kintex7 -verilog "C:/Users/TLT3620/Documents/Tencent Files/627464892/FileRecv/HYF5681_03/JJT2420-04/framework.vf" -w "C:/Users/TLT3620/Documents/Tencent Files/627464892/FileRecv/HYF5681_03/JJT2420-04/code/framework.sch"
//Design Name: framework
//Device: kintex7
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale 1ns / 1ps

module ScanSync_MUSER_framework(Hexs, 
                                LES, 
                                point, 
                                Scan, 
                                AN, 
                                Hexo, 
                                LE, 
                                p);

    input [31:0] Hexs;
    input [7:0] LES;
    input [7:0] point;
    input [2:0] Scan;
   output [3:0] AN;
   output [3:0] Hexo;
   output LE;
   output p;
   
   wire [7:0] COM;
   wire G0;
   wire [7:0] Hex;
   wire V5;
   
   BUF  XLXI_3 (.I(Hex[7]), 
               .O(Hexo[3]));
   BUF  XLXI_4 (.I(Hex[6]), 
               .O(Hexo[2]));
   BUF  XLXI_5 (.I(Hex[5]), 
               .O(Hexo[1]));
   BUF  XLXI_6 (.I(Hex[4]), 
               .O(Hexo[0]));
   BUF  XLXI_7 (.I(COM[3]), 
               .O(AN[3]));
   BUF  XLXI_8 (.I(COM[2]), 
               .O(AN[2]));
   BUF  XLXI_9 (.I(COM[1]), 
               .O(AN[1]));
   BUF  XLXI_10 (.I(COM[0]), 
                .O(AN[0]));
   BUF  XLXI_11 (.I(COM[7]), 
                .O(LE));
   BUF  XLXI_12 (.I(COM[6]), 
                .O(p));
   VCC  XLXI_13 (.P(V5));
   GND  XLXI_14 (.G(G0));
   MUX8T1_8  XLXI_15 (.I0({Hexs[3:0], G0, G0, G0, G0}), 
                     .I1({Hexs[7:4], G0, G0, G0, G0}), 
                     .I2({Hexs[11:8], G0, G0, G0, G0}), 
                     .I3({Hexs[15:12], G0, G0, G0, G0}), 
                     .I4({Hexs[19:16], G0, G0, G0, G0}), 
                     .I5({Hexs[23:20], G0, G0, G0, G0}), 
                     .I6({Hexs[27:24], G0, G0, G0, G0}), 
                     .I7({Hexs[31:28], G0, G0, G0, G0}), 
                     .s(Scan[2:0]), 
                     .O(Hex[7:0]));
   MUX8T1_8  XLXI_16 (.I0({LES[0], point[0], G0, G0, V5, V5, V5, G0}), 
                     .I1({LES[1], point[1], G0, G0, V5, V5, G0, V5}), 
                     .I2({LES[2], point[2], G0, G0, V5, G0, V5, V5}), 
                     .I3({LES[3], point[3], G0, G0, G0, V5, V5, V5}), 
                     .I4({LES[4], point[4], G0, G0, V5, V5, V5, G0}), 
                     .I5({LES[5], point[5], G0, G0, V5, V5, G0, V5}), 
                     .I6({LES[6], point[6], G0, G0, V5, G0, V5, V5}), 
                     .I7({LES[7], point[7], G0, G0, G0, V5, V5, V5}), 
                     .s(Scan[2:0]), 
                     .O(COM[7:0]));
endmodule
`timescale 1ns / 1ps

module Seg7_Dev_MUSER_framework(flash, 
                                Hexs, 
                                LES, 
                                point, 
                                Scan, 
                                SW0, 
                                AN, 
                                SEGMENT);

    input flash;
    input [31:0] Hexs;
    input [7:0] LES;
    input [7:0] point;
    input [2:0] Scan;
    input SW0;
   output [3:0] AN;
   output [7:0] SEGMENT;
   
   wire G0;
   wire [3:0] Hex;
   wire [7:0] SEG_TXT;
   wire V5;
   wire XLXN_8;
   wire XLXN_9;
   wire XLXN_10;
   wire [7:0] XLXN_19;
   
   MUXHM  MHXHM (.a(XLXN_19[7:0]), 
                .b(SEG_TXT[7:0]), 
                .sel(SW0), 
                .o(SEGMENT[7:0]));
   MC14495_ZJU  M1 (.D0(Hex[0]), 
                   .D1(Hex[1]), 
                   .D2(Hex[2]), 
                   .D3(Hex[3]), 
                   .LE(XLXN_8), 
                   .Point(XLXN_9), 
                   .a(SEG_TXT[0]), 
                   .b(SEG_TXT[1]), 
                   .c(SEG_TXT[2]), 
                   .d(SEG_TXT[3]), 
                   .e(SEG_TXT[4]), 
                   .f(SEG_TXT[5]), 
                   .g(SEG_TXT[6]), 
                   .p(SEG_TXT[7]));
   ScanSync_MUSER_framework  M2 (.Hexs(Hexs[31:0]), 
                                .LES(LES[7:0]), 
                                .point(point[7:0]), 
                                .Scan(Scan[2:0]), 
                                .AN(AN[3:0]), 
                                .Hexo(Hex[3:0]), 
                                .LE(XLXN_10), 
                                .p(XLXN_9));
   Seg_map  M3 (.Hexs(Hexs[31:0]), 
               .Scan(Scan[2:0]), 
               .Seg_map(XLXN_19[7:0]));
   AND2  XLXI_6 (.I0(XLXN_10), 
                .I1(flash), 
                .O(XLXN_8));
   VCC  XLXI_9 (.P(V5));
   GND  XLXI_10 (.G(G0));
endmodule
`timescale 1ns / 1ps

module Display_MUSER_framework(clk, 
                               flash, 
                               Hexs, 
                               LES, 
                               point, 
                               rst, 
                               Start, 
                               SW0, 
                               seg_clk, 
                               seg_clrn, 
                               SEG_PEN, 
                               seg_sout);

    input clk;
    input flash;
    input [31:0] Hexs;
    input [7:0] LES;
    input [7:0] point;
    input rst;
    input Start;
    input SW0;
   output seg_clk;
   output seg_clrn;
   output SEG_PEN;
   output seg_sout;
   
   wire [63:0] XLXN_15;
   wire [63:0] XLXN_16;
   wire [63:0] XLXN_18;
   
   HexTo8SEG  SM1 (.flash(flash), 
                  .Hexs(Hexs[31:0]), 
                  .LES(LES[7:0]), 
                  .points(point[7:0]), 
                  .SEG_TXT(XLXN_15[63:0]));
   SSeg_map  SM3 (.Disp_num({Hexs[31:0], Hexs[31:0]}), 
                 .Seg_map(XLXN_16[63:0]));
   MUXSH2M  XLXI_4 (.a(XLXN_15[63:0]), 
                   .b(XLXN_16[63:0]), 
                   .sel(SW0), 
                   .o(XLXN_18[63:0]));
   P2S  XLXI_5 (.clk(clk), 
               .P_Data(XLXN_18[63:0]), 
               .rst(rst), 
               .Serial(Start), 
               .EN(SEG_PEN), 
               .sout(seg_sout), 
               .s_clk(seg_clk), 
               .s_clrn(seg_clrn));
endmodule
`timescale 1ns / 1ps

module framework(clk_100mhz, 
                 K_COL, 
                 RSTN, 
                 SW, 
                 AN, 
                 Buzzer, 
                 CR, 
                 K_ROW, 
                 LED, 
                 LEDCLK, 
                 LEDCLR, 
                 LEDDT, 
                 LEDEN, 
                 RDY, 
                 readn, 
                 SEGCLK, 
                 SEGCLR, 
                 SEGDT, 
                 SEGEN, 
                 SEGMENT);

    input clk_100mhz;
    input [3:0] K_COL;
    input RSTN;
    input [15:0] SW;
   output [3:0] AN;
   output Buzzer;
   output CR;
   output [4:0] K_ROW;
   output [7:0] LED;
   output LEDCLK;
   output LEDCLR;
   output LEDDT;
   output LEDEN;
   output RDY;
   output readn;
   output SEGCLK;
   output SEGCLR;
   output SEGDT;
   output SEGEN;
   output [7:0] SEGMENT;
   
   wire [31:0] Addr_out;
   wire [31:0] AI;
   wire [31:0] BI;
   wire [7:0] blink;
   wire [3:0] BTN_OK;
   wire Clk_CPU;
   wire [31:0] Counter_out;
   wire [31:0] CPU2IO;
   wire [31:0] Data_in;
   wire [31:0] Data_out;
   wire [31:0] Disp_num;
   wire [31:0] Div;
   wire GPIOF0;
   wire G0;
   wire [31:0] inst;
   wire IO_clk;
   wire [15:0] LED_out;
   wire [7:0] LE_out;
   wire N0;
   wire [31:0] PC;
   wire [7:0] point_out;
   wire [3:0] Pulse;
   wire rst;
   wire [15:0] SW_OK;
   wire V5;
   wire [4:0] XLXN_12;
   wire XLXN_72;
   wire XLXN_81;
   wire [31:0] XLXN_106;
   wire [9:0] XLXN_107;
   wire [0:0] XLXN_108;
   wire [31:0] XLXN_109;
   wire XLXN_112;
   wire XLXN_117;
   wire XLXN_121;
   wire XLXN_122;
   wire XLXN_123;
   wire [1:0] XLXN_124;
   wire RDY_DUMMY;
   wire readn_DUMMY;
   
   assign RDY = RDY_DUMMY;
   assign readn = readn_DUMMY;
   BUF  XLXI_29 (.I(V5), 
                .O(Buzzer));
   VCC  XLXI_31 (.P(V5));
   GND  XLXI_32 (.G(G0));
   Multi_8CH32  XLXI_48 (.blink_in({N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, 
         N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, 
         N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, 
         N0, N0, N0, blink[7:0], blink[7:0]}), 
                        .clk(IO_clk), 
                        .Data0(CPU2IO[31:0]), 
                        .data1({N0, N0, PC[31:2]}), 
                        .data2(inst[31:0]), 
                        .data3(Counter_out[31:0]), 
                        .data4(Addr_out[31:0]), 
                        .data5(Data_out[31:0]), 
                        .data6(Data_in[31:0]), 
                        .data7(PC[31:0]), 
                        .EN(XLXN_117), 
                        .LES({N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, 
         N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, 
         N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, 
         N0, N0, blink[7:0], blink[7:0]}), 
                        .point_in({Div[31:0], Div[31:0]}), 
                        .rst(rst), 
                        .Test(SW_OK[7:5]), 
                        .Disp_num(Disp_num[31:0]), 
                        .LE_out(LE_out[7:0]), 
                        .point_out(point_out[7:0]));
   SAnti_jitter  XLXI_50 (.clk(clk_100mhz), 
                         .Key_y(K_COL[3:0]), 
                         .readn(readn_DUMMY), 
                         .RSTN(RSTN), 
                         .SW(SW[15:0]), 
                         .BTN_OK(BTN_OK[3:0]), 
                         .CR(CR), 
                         .Key_out(XLXN_12[4:0]), 
                         .Key_ready(RDY_DUMMY), 
                         .Key_x(K_ROW[4:0]), 
                         .pulse_out(Pulse[3:0]), 
                         .rst(rst), 
                         .SW_OK(SW_OK[15:0]));
   SEnter_2_32  XLXI_51 (.BTN(BTN_OK[2:0]), 
                        .clk(clk_100mhz), 
                        .Ctrl({SW_OK[7:5], SW_OK[15], SW_OK[0]}), 
                        .Din(XLXN_12[4:0]), 
                        .D_ready(RDY_DUMMY), 
                        .Ai(AI[31:0]), 
                        .Bi(BI[31:0]), 
                        .blink(blink[7:0]), 
                        .readn(readn_DUMMY));
   Display_MUSER_framework  XLXI_54 (.clk(clk_100mhz), 
                                    .flash(Div[25]), 
                                    .Hexs(Disp_num[31:0]), 
                                    .LES(LE_out[7:0]), 
                                    .point(point_out[7:0]), 
                                    .rst(rst), 
                                    .Start(Div[20]), 
                                    .SW0(SW_OK[0]), 
                                    .seg_clk(SEGCLK), 
                                    .seg_clrn(SEGCLR), 
                                    .SEG_PEN(SEGEN), 
                                    .seg_sout(SEGDT));
   Seg7_Dev_MUSER_framework  XLXI_55 (.flash(Div[25]), 
                                     .Hexs(Disp_num[31:0]), 
                                     .LES(LE_out[7:0]), 
                                     .point(point_out[7:0]), 
                                     .Scan({SW_OK[1], Div[19:18]}), 
                                     .SW0(SW_OK[0]), 
                                     .AN(AN[3:0]), 
                                     .SEGMENT(SEGMENT[7:0]));
   ROM_D  XLXI_58 (.a(PC[11:2]), 
                  .spo(inst[31:0]));
   RAM_B  XLXI_59 (.addra(XLXN_107[9:0]), 
                  .clka(XLXN_112), 
                  .dina(XLXN_109[31:0]), 
                  .wea(XLXN_108[0]), 
                  .douta(XLXN_106[31:0]));
   Counter  XLXI_60 (.clk(IO_clk), 
                    .clk0(Div[6]), 
                    .clk1(Div[9]), 
                    .clk2(Div[11]), 
                    .counter_ch(XLXN_124[1:0]), 
                    .counter_val(CPU2IO[31:0]), 
                    .counter_we(XLXN_123), 
                    .rst(rst), 
                    .counter_out(Counter_out[31:0]), 
                    .counter0_OUT(XLXN_72), 
                    .counter1_OUT(XLXN_122), 
                    .counter2_OUT(XLXN_121));
   MIO_BUS  XLXI_61 (.addr_bus(Addr_out[31:0]), 
                    .BTN(BTN_OK[3:0]), 
                    .clk(clk_100mhz), 
                    .counter_out(Counter_out[31:0]), 
                    .counter0_out(XLXN_72), 
                    .counter1_out(XLXN_122), 
                    .counter2_out(XLXN_121), 
                    .Cpu_data2bus(Data_out[31:0]), 
                    .led_out(LED_out[15:0]), 
                    .mem_w(XLXN_81), 
                    .ram_data_out(XLXN_106[31:0]), 
                    .rst(rst), 
                    .SW(SW_OK[15:0]), 
                    .counter_we(XLXN_123), 
                    .Cpu_data4bus(Data_in[31:0]), 
                    .data_ram_we(XLXN_108[0]), 
                    .GPIOe0000000_we(XLXN_117), 
                    .GPIOf0000000_we(GPIOF0), 
                    .Peripheral_in(CPU2IO[31:0]), 
                    .ram_addr(XLXN_107[9:0]), 
                    .ram_data_in(XLXN_109[31:0]));
   SPIO  XLXI_65 (.clk(IO_clk), 
                 .EN(GPIOF0), 
                 .P_Data(CPU2IO[31:0]), 
                 .rst(rst), 
                 .Start(Div[20]), 
                 .counter_set(XLXN_124[1:0]), 
                 .GPIOf0(), 
                 .led_clk(LEDCLK), 
                 .led_clrn(LEDCLR), 
                 .LED_out(LED_out[15:0]), 
                 .LED_PEN(LEDEN), 
                 .led_sout(LEDDT));
   clk_div  XLXI_67 (.clk(clk_100mhz), 
                    .rst(rst), 
                    .SW2(SW_OK[2]), 
                    .clkdiv(Div[31:0]), 
                    .Clk_CPU(Clk_CPU));
   INV  XLXI_68 (.I(Clk_CPU), 
                .O(IO_clk));
   INV  XLXI_70 (.I(clk_100mhz), 
                .O(XLXN_112));
   PIO  XLXI_71 (.clk(IO_clk), 
                .EN(GPIOF0), 
                .PData_in(CPU2IO[31:0]), 
                .rst(rst), 
                .counter_set(), 
                .GPIOf0(), 
                .LED_out(LED[7:0]));
   SCPU  XLXI_75 (.clk(Clk_CPU), 
                 .Data_in(Data_in[31:0]), 
                 .inst_in(inst[31:0]), 
                 .INT(XLXN_72), 
                 .MIO_ready(), 
                 .reset(rst), 
                 .Addr_out(Addr_out[31:0]), 
                 .CPU_MIO(), 
                 .Data_out(Data_out[31:0]), 
                 .mem_w(XLXN_81), 
                 .PC_out(PC[31:0]));
endmodule
